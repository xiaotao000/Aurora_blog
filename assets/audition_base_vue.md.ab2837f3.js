import{_ as e,c as o,o as d,N as c}from"./chunks/framework.01b322b0.js";const t="/Aurora_blog/assets/vue内置命令.dde7be64.webp",m=JSON.parse('{"title":"vue相关面试题","description":"","frontmatter":{},"headers":[],"relativePath":"audition/base/vue.md"}'),r={name:"audition/base/vue.md"},i=c('<h1 id="vue相关面试题" tabindex="-1">vue相关面试题 <a class="header-anchor" href="#vue相关面试题" aria-label="Permalink to &quot;vue相关面试题&quot;">​</a></h1><h2 id="谈谈你对-vue-的理解吧" tabindex="-1">谈谈你对 <code>Vue</code> 的理解吧？ <a class="header-anchor" href="#谈谈你对-vue-的理解吧" aria-label="Permalink to &quot;谈谈你对 `Vue` 的理解吧？&quot;">​</a></h2><p>渐进式 <code>JavaScript</code> 框架、核心库加插件、动态创建用户界面（异步获取后台数据，数据展示在界面）</p><p>特点： <code>MVVM</code> 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 <code>UI</code> （和 <code>react</code> 相似），可以轻松引入 Vue 插件或其他的第三方库进行开发。</p><h2 id="说一下-vue-有哪些优点和特点" tabindex="-1">说一下 <code>Vue</code> 有哪些优点和特点 <a class="header-anchor" href="#说一下-vue-有哪些优点和特点" aria-label="Permalink to &quot;说一下 `Vue` 有哪些优点和特点&quot;">​</a></h2><ul><li><strong>渐进式框架</strong>：可以在任何项目中轻易的引入；</li><li><strong>轻量级框架</strong>：只关注视图层，是一个构建数据的视图集合，大小只有几十 <code>kb</code> ；</li><li><strong>简单易学</strong>：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；</li><li><strong>双向数据绑定</strong>：在数据操作方面更为简单；</li><li><strong>组件化</strong>：很大程度上实现了逻辑的封装和重用，在构建单页面应用方面有着独特的优势；</li><li><strong>视图，数据，结构分离</strong>：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；</li></ul><h2 id="vue-组件间传值的-n-种方式" tabindex="-1"><code>vue</code> 组件间传值的 <code>n</code> 种方式 <a class="header-anchor" href="#vue-组件间传值的-n-种方式" aria-label="Permalink to &quot;`vue` 组件间传值的 `n` 种方式&quot;">​</a></h2><p><strong>（1）<code>props / $emit</code> 适用 父子组件通信</strong></p><p><strong>（2）<code>ref</code> 适用 父子组件通信</strong></p><ul><li><code>ref</code>：如果在普通的 <code>DOM</code> 元素上使用，引用指向的就是 <code>DOM</code> 元素；如果用在子组件上，引用就指向组件实例</li></ul><p><strong>（3）<code>$parent</code> / <code>$children</code> / <code>$root</code>：访问父 / 子实例 / 根实例</strong></p><p><strong>（4）<code>EventBus （$emit / $on）</code> 适用于 父子、隔代、兄弟组件通信</strong></p><p>这种方法通过一个空的 <code>Vue</code> 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</p><p><strong>（5）<code>$attrs</code>/<code>$listeners</code> 适用于 隔代组件通信</strong></p><ul><li><code>$attrs</code>：包含了父作用域中不被 <code>prop</code> 所识别 (且获取) 的特性绑定 ( <code>class</code> 和 <code>style</code> 除外 )。当一个组件没有声明任何 <code>prop</code> 时，这里会包含所有父作用域的绑定 ( <code>class</code> 和 <code>style</code> 除外 )，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。通常配合 <code>inheritAttrs</code> 选项一起使用。</li><li><code>$listeners</code>：包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</li></ul><p><strong>（6）<code>provide / inject</code> 适用于 隔代组件通信</strong></p><p>祖先组件中通过 <code>provide</code> 来提供变量，然后在子孙组件中通过 <code>inject</code> 来注入变量。<code>provide / inject API</code> 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p><p><strong>（7）<code>Vuex</code> 适用于 父子、隔代、兄弟组件通信</strong></p><p><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发的状态管理模式。每一个 <code>Vuex</code> 应用的核心就是 <code>store</code>（仓库）。<code>store</code> 基本上就是一个容器，它包含着你的应用中大部分的状态 ( <code>state</code> )。</p><ul><li><code>Vuex</code> 的状态存储是响应式的。当 <code>Vue</code> 组件从 <code>store</code> 中读取状态的时候，若 <code>store</code> 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>改变 <code>store</code> 中的状态的唯一途径就是显式地提交 <code>(commit) mutation</code>。这样使得我们可以方便地跟踪每一个状态的变化。</li></ul><p><strong>（8）插槽</strong></p><p><code>Vue3</code> 可以通过 <code>usesolt</code> 获取插槽数据。</p><p><strong>（9）<code>mitt.js</code> 适用于任意组件通信</strong></p><p><code>Vue3</code> 中移除了 <code>$on</code>，<code>$off</code>等方法，所以 <code>EventBus</code> 不再使用，相应的替换方案就是 <code>mitt.js</code></p><h2 id="vue-有哪些内置指令" tabindex="-1"><code>vue</code> 有哪些内置指令 <a class="header-anchor" href="#vue-有哪些内置指令" aria-label="Permalink to &quot;`vue` 有哪些内置指令&quot;">​</a></h2><p><img src="'+t+'" alt="img"></p><h2 id="v-show-和-v-if-有什么区别" tabindex="-1"><code>v-show</code> 和 <code>v-if</code> 有什么区别 <a class="header-anchor" href="#v-show-和-v-if-有什么区别" aria-label="Permalink to &quot;`v-show` 和 `v-if` 有什么区别&quot;">​</a></h2><ul><li><strong>手段</strong>：<code>v-if</code> 是动态的向 <code>DOM</code> 树内添加或者删除 <code>DOM</code> 元素；<code>v-show</code> 是通过设置 <code>DOM</code> 元素的 <code>display</code> 样式属性控制显隐；</li><li><strong>编译过程</strong>：<code>v-if</code> 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；<code>v-show</code> 只是简单的基于 <code>css</code> 切换；</li><li><strong>编译条件</strong>：<code>v-if</code> 是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译; <code>v-show</code> 是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且 <code>DOM</code> 元素保留；</li><li><strong>性能消耗</strong>：<code>v-if</code> 有更高的切换消耗；<code>v-show</code> 有更高的初始渲染消耗；</li><li><strong>使用场景</strong>：<code>v-if</code> 适合运营条件不大可能改变；<code>v-show</code> 适合频繁切换。</li></ul><h2 id="vue-首屏渲染优化有哪些" tabindex="-1"><code>vue</code> 首屏渲染优化有哪些 <a class="header-anchor" href="#vue-首屏渲染优化有哪些" aria-label="Permalink to &quot;`vue` 首屏渲染优化有哪些&quot;">​</a></h2><ul><li>图片压缩/懒加载</li><li>禁止生成 <code>.map</code> 文件</li><li>路由懒加载</li><li><code>cdn</code> 引入公共库</li><li>开启 <code>GZIP</code> 压缩</li></ul><h2 id="vue-生命周期函数有哪些" tabindex="-1"><code>vue</code> 生命周期函数有哪些 <a class="header-anchor" href="#vue-生命周期函数有哪些" aria-label="Permalink to &quot;`vue` 生命周期函数有哪些&quot;">​</a></h2><p><code>Vue</code> 的生命周期钩子核心实现是利用发布订阅模式先把用户传入的的生命周期钩子订阅好（内部采用数组的方式存储）然后在创建组件实例的过程中会一次执行对应的钩子方法（发布）。</p><ul><li><code>beforeCreate</code>：是 <code>new Vue()</code> 之后触发的第一个钩子，在当前阶段 <code>data</code>、<code>methods</code>、<code>computed</code> 以及 <code>watch</code> 上的数据和方法都不能被访问。</li><li><code>created</code>：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 <code>updated</code> 函数。可以做一些初始数据的获取，在当前阶段无法与 <code>Dom</code> 进行交互，如果非要想，可以通过 <code>vm.$nextTick</code> 来访问 <code>Dom</code>。</li><li><code>beforeMount</code>：发生在挂载之前，在这之前 <code>template</code> 模板已导入渲染函数编译。而当前阶段虚拟 <code>Dom</code> 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 <code>updated</code>。</li><li><code>mounted</code>：在挂载完成后发生，在当前阶段，真实的 <code>Dom</code> 挂载完毕，数据完成双向绑定，可以访问到 <code>Dom</code> 节点，使用 <code>$refs</code> 属性对 <code>Dom</code> 进行操作。</li><li><code>beforeUpdate</code>：发生在更新之前，也就是响应式数据发生更新，虚拟 <code>dom</code> 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</li><li><code>updated</code>：发生在更新完成之后，当前阶段组件 <code>Dom</code> 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</li><li><code>beforeDestroy</code>：发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</li><li><code>destroyed</code>：发生在实例销毁之后，这个时候只剩下了 <code>dom</code> 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</li></ul><h2 id="第一次页面加载会触发哪几个钩子" tabindex="-1">第一次页面加载会触发哪几个钩子 <a class="header-anchor" href="#第一次页面加载会触发哪几个钩子" aria-label="Permalink to &quot;第一次页面加载会触发哪几个钩子&quot;">​</a></h2><p><code>beforeCreate</code>，<code>created</code>，<code>beforeMount</code>，<code>mounted</code></p><h2 id="vue-router-有几种模式" tabindex="-1"><code>vue-router</code> 有几种模式 <a class="header-anchor" href="#vue-router-有几种模式" aria-label="Permalink to &quot;`vue-router` 有几种模式&quot;">​</a></h2><p><code>vue-router</code> 有 3 种路由模式：<code>hash</code>、<code>history</code>、<code>abstract</code>：</p><ul><li><strong>hash</strong>: 使用 <code>URL hash</code> 值来作路由。支持所有浏览器，包括不支持 <code>HTML5 History Api</code> 的浏览器；</li><li><strong>history</strong> : 依赖 <code>HTML5 History API</code> 和服务器配置。</li><li><strong>abstract</strong> : 支持所有 <code>JavaScript</code> 运行环境，如 <code>Node.js</code> 服务器端。如果发现没有浏览器的 <code>API</code>，路由会自动强制进入这个模式.</li></ul><h2 id="vuex-有哪些属性" tabindex="-1"><code>vuex</code> 有哪些属性 <a class="header-anchor" href="#vuex-有哪些属性" aria-label="Permalink to &quot;`vuex` 有哪些属性&quot;">​</a></h2><p>有五种，分别</p><ul><li><strong>State</strong>：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li><li><strong>Getter</strong>：允许组件从 <code>Store</code> 中获取数据，<code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性。</li><li><strong>Mutation</strong>：是唯一更改 <code>store</code> 中状态的方法，且必须是同步函数。</li><li><strong>Action</strong>：用于提交 <code>mutation</code>，而不是直接变更状态，可以包含任意异步操作。</li><li><strong>Module</strong>：允许将单一的 <code>Store</code> 拆分为多个 <code>store</code> 且同时保存在单一的状态树中。</li></ul><h2 id="学完-vue3-有什么想法么-nuxt-什么感想" tabindex="-1">学完 <code>vue3</code> 有什么想法么？<code>nuxt</code> 什么感想 <a class="header-anchor" href="#学完-vue3-有什么想法么-nuxt-什么感想" aria-label="Permalink to &quot;学完 `vue3` 有什么想法么？`nuxt` 什么感想&quot;">​</a></h2><p>答：<code>vue3</code> 在代码编写层面，可以更好的完成结构和逻辑的复用。<code>nuxt</code> 是一个约定大于配置的框架，很多东西人家都给封装好了，按照约定去写就可以了，有利于团队协作。</p><h2 id="vue2-和-vue3-有什么区别" tabindex="-1"><code>vue2</code> 和 <code>vue3</code> 有什么区别 <a class="header-anchor" href="#vue2-和-vue3-有什么区别" aria-label="Permalink to &quot;`vue2` 和 `vue3` 有什么区别&quot;">​</a></h2><ul><li>响应式原理</li><li>生命周期钩子名称</li><li>自定义指令钩子名称</li><li>新的内置组件</li><li><code>diff</code> 算法</li><li><code>Composition API</code></li></ul><h2 id="watch-和-computed-区别和使用场景" tabindex="-1"><code>watch</code> 和 <code>computed</code> 区别和使用场景 <a class="header-anchor" href="#watch-和-computed-区别和使用场景" aria-label="Permalink to &quot;`watch` 和 `computed` 区别和使用场景&quot;">​</a></h2><p><strong>对于Computed：</strong></p><ul><li>它支持缓存，只有依赖的数据发生了变化，才会重新计算</li><li>不支持异步，当 <code>Computed</code> 中有异步操作时，无法监听数据的变化</li><li>如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用 computed</li><li>如果 <code>computed</code> 属性的属性值是函数，那么默认使用 <code>get</code> 方法，函数的返回值就是属性的属性值；在 <code>computed</code> 中，属性有一个 <code>get</code> 方法和一个 <code>set</code> 方法，当数据发生变化时，会调用 <code>set</code> 方法。</li></ul><p><strong>对于Watch：</strong></p><ul><li><p>它不支持缓存，当一个属性发生变化时，它就会触发相应的操作</p></li><li><p>支持异步监听</p></li><li><p>监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值</p></li><li><p>监听数据必须是 <code>data</code> 中声明的或者父组件传递过来的 <code>props</code> 中的数据，当发生变化时，会触发其他操作</p></li><li><p>函数有两个的参数：</p><ul><li><strong>immediate</strong>：组件加载立即触发回调函数</li><li><strong>deep</strong>：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。</li></ul></li></ul><h2 id="vue-实现双向数据绑定原理是什么" tabindex="-1"><code>Vue</code> 实现双向数据绑定原理是什么？ <a class="header-anchor" href="#vue-实现双向数据绑定原理是什么" aria-label="Permalink to &quot;`Vue` 实现双向数据绑定原理是什么？&quot;">​</a></h2><p>Vue2.x 采用数据劫持结合发布订阅模式（PubSub 模式）的方式，通过 <code>Object.defineProperty</code> 来劫持各个属性的 <code>setter、getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><code>Vue3.x</code> 放弃了 <code>Object.defineProperty</code> ，使用 <code>ES6</code> 原生的 Proxy，来解决以前使用 <code>Object.defineProperty</code> 所存在的一些问题。</p><h2 id="nexttick-的作用是什么" tabindex="-1"><code>nextTick</code> 的作用是什么？ <a class="header-anchor" href="#nexttick-的作用是什么" aria-label="Permalink to &quot;`nextTick` 的作用是什么？&quot;">​</a></h2><p>作用：<code>vue</code> 更新 <code>DOM</code> 是异步更新的，数据变化，<code>DOM</code> 的更新不会马上完成，<code>nextTick</code> 的回调是在下次 <code>DOM</code> 更新循环结束之后执行的延迟回调。</p><h2 id="scoped-是如何实现样式穿透的" tabindex="-1"><code>scoped</code> 是如何实现样式穿透的？ <a class="header-anchor" href="#scoped-是如何实现样式穿透的" aria-label="Permalink to &quot;`scoped` 是如何实现样式穿透的？&quot;">​</a></h2><p><strong>方法一</strong></p><p>使用 ::v-deep 操作符( &gt;&gt;&gt; 的别名)</p><p><strong>方法二</strong></p><p>定义一个含有 <code>scoped</code> 属性的 <code>style</code> 标签之外，再定义一个不含有 <code>scoped</code> 属性的 <code>style</code> 标签，即在一个 vue 组件中定义一个全局的 <code>style</code> 标签，一个含有作用域的 <code>style</code> 标签此时，我们只需要将修改第三方样式的 <code>css</code> 写在第一个 <code>style</code> 中即可。</p><p><strong>方法三</strong></p><p>上面的方法一需要单独书写一个不含有 scoped 属性的 <code>style</code> 标签，可能会造成全局样式的污染。 更推荐的方式是在组件的外层 <code>DOM</code> 上添加唯一的 <code>class</code> 来区分不同组件，在书写样式时就可以正常针对针对这部分 <code>DOM</code> 书写样式。</p>',62),a=[i];function l(s,n,u,p,h,v){return d(),o("div",null,a)}const b=e(r,[["render",l]]);export{m as __pageData,b as default};
